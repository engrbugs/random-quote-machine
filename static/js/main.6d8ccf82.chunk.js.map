{"version":3,"sources":["App.js","serviceWorker.js","index.js","wheel.svg"],"names":["COLOR","App","state","quotes","index","color","animationEnter","animationLeave","durationEnter","durationLeave","RandomizeIndex","length","ci","Math","floor","random","setState","$","addClass","onAnimationEnd","removeClass","fetch","then","res","json","this","quote","className","src","logo","alt","id","style","background","onChange","handleChange","author","href","target","rel","onClick","Component","document","ready","css","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oSASMA,G,MAAQ,CAAE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAClE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAClE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAClE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAG5EC,E,4MACJC,MAAQ,CACNC,OAAQ,GACRC,MAAO,EACPC,MAAO,UACPC,eAAgB,WAChBC,eAAgB,YAChBC,cAAe,IACfC,cAAe,K,EAYjBC,eAAiB,WAAO,IACdP,EAAW,EAAKD,MAAhBC,OACR,GAAIA,EAAOQ,OAAS,EAAG,CACrB,IAAIC,EAAKC,KAAKC,MAAMD,KAAKE,SAAWf,EAAMW,QACtCP,EAAQS,KAAKC,MAAMD,KAAKE,SAAWZ,EAAOQ,QAC9C,EAAKK,SAAS,CACZZ,MAAOA,EACPC,MAAOL,EAAMY,KAEfK,IAAE,SAASC,SAAS,uC,EAIxBC,eAAiB,WACfF,IAAE,SAASG,YAAY,sC,kEAvBJ,IAAD,OAClBC,MApBW,0IAoBGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAC7BF,MAAK,SAAAC,GACJ,EAAKP,SAAS,CACZb,OAAQoB,EAAIpB,QACX,EAAKO,qB,+BAqBF,IAAD,EAC0Be,KAAKvB,MAA9BC,EADD,EACCA,OAAQC,EADT,EACSA,MAAOC,EADhB,EACgBA,MACnBqB,EAAQvB,EAAOC,GACnB,OACE,yBAAKuB,UAAU,OACb,4BAAQA,UAAU,cAChB,2BACE,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAD3C,8BAMF,yBAAKC,GAAG,YAAYJ,UAAU,UAC9BK,MAAO,CAAEC,WAAY5B,IAEnB,yBAAKsB,UAAU,wBACfO,SAAUT,KAAKU,cACXT,GACA,yBAAKK,GAAG,OAAOJ,UAAU,OAAOR,eAAgBM,KAAKN,gBACnD,8BAAM,2BAAIO,EAAMA,QAChB,uBAAGK,GAAG,SAASJ,UAAU,sBAAzB,SAAgDD,EAAMU,SAG1D,yBAAKT,UAAU,kCACb,uBAAGI,GAAG,cAAcJ,UAAU,kBAC9BU,KAAMX,GAAO,GAAF,OArER,+EAqEQ,YAAiBA,EAAMA,MAAvB,kBAAiCA,EAAMU,OAAvC,KACXE,OAAO,SAASC,IAAI,uBACpB,uBAAGZ,UAAU,mBAHb,UAIA,4BAAQI,GAAG,YAAYJ,UAAU,kBACjCa,QAASf,KAAKf,gBADd,qB,GAjEI+B,aA4ElBxB,IAAEyB,UAAUC,OAAM,WAChB1B,IAAE,aAAa2B,IAAI,CACjB,UAAc,oBAEhBC,YAAW,WACT5B,IAAE,aAAa2B,IAAI,CACnB,UAAc,wCAEb,SAGU3C,QC1FK6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASY,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcb,MACrBrB,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.6d8ccf82.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport 'animate.css/animate.css';\n\nimport logo from './wheel.svg';\nimport './App.css';\n\nconst QUOTES = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\nconst tweetURL = 'https://twitter.com/intent/tweet?hashtags=quotes&hashtags=freecodecamp&text='\nconst COLOR = [ '#ee5253', '#ff9f43', '#c8d6e5', '#576574', '#ff6b6b', '#8395a7', '#feca57', \n                '#48dbfb', '#10ac84', '#01a3a4', '#2e86de', '#54a0ff', '#7f8c8d', '#e67e22',\n                '#2ecc71', '#16a085', '#2c3e50', '#f1c40f', '#8e44ad', '#6c5ce7', '#2d3436',\n                '#0984e3', '#fab1a0', '#ffeaa7', '#00b894', '#e84393', '#40739e', '#c23616']\n\n\nclass App extends Component {\n  state = {\n    quotes: [],\n    index: 0,\n    color: \"#282c34\",\n    animationEnter: 'bounceIn',\n    animationLeave: 'bounceOut',\n    durationEnter: 1000,\n    durationLeave: 1000,\n  }\n\n  componentDidMount() {\n    fetch(QUOTES).then(res => res.json())\n    .then(res => {\n      this.setState({\n        quotes: res.quotes\n      }, this.RandomizeIndex);\n    })\n  }\n  \n  RandomizeIndex = () => {\n    const { quotes } = this.state;\n    if (quotes.length > 0) {\n      let ci = Math.floor(Math.random() * COLOR.length);\n      let index = Math.floor(Math.random() * quotes.length);\n      this.setState({\n        index: index,\n        color: COLOR[ci]\n      });\n      $(\"#text\").addClass('animate__animated animate__zoomIn');\n    }\n  }\n\n  onAnimationEnd = () => {\n    $(\"#text\").removeClass('animate__animated animate__zoomIn');\n  };\n\n  render (){\n    const { quotes, index, color } = this.state;\n    let quote = quotes[index];\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />    \n            FCC: Random Quote Machine\n          </p>\n        </header>\n\n        <div id=\"quote-box\" className=\"wrapper\"\n        style={{ background: color }}>\n\n          <div className=\"col-6 box p-5 rounded\"\n          onChange={this.handleChange}>\n            { quote && (\n              <div id=\"text\" className=\"mb-4\" onAnimationEnd={this.onAnimationEnd}>\n                <cite><p>{quote.quote}</p></cite>\n                <p id=\"author\" className=\"d-block text-right\">—{quote.author}</p>\n              </div>\n            )}\n            <div className=\"d-flex justify-content-between\">\n              <a id=\"tweet-quote\" className=\"btn btn-primary\"\n              href={quote&&`${tweetURL}\"${quote.quote}\"—${quote.author} `} \n              target=\"_blank\" rel=\"noopener noreferrer\">\n              <i className=\"fab fa-twitter\"></i> Tweet</a>\n              <button id=\"new-quote\" className=\"btn btn-primary\" \n              onClick={this.RandomizeIndex}\n              >New Quote</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n$(document).ready(function () {\n  $('.App-logo').css({\n    'transform' : 'rotate(9373deg)',\n  });\n  setTimeout(() => {\n    $('.App-logo').css({\n    'animation' : 'App-logo-spin infinite 10s linear' \t\t\n    });\n  }, 5500);\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/wheel.e353a5d1.svg\";"],"sourceRoot":""}